@page "/vybaveni"
@inject HttpClient Http

@if(!isInNewMode)
{
 <button @onclick="@(() => {isInNewMode = true; newEntity = new(){IsInEditMode = true, Name="novota" }; })" class="twbtn bg-blue-500 my-2">
    Přidej nový záznam
</button>
}

@if (seznamVybaveni == null)
{
    <div class="absolute right-1/2 bottom-1/2  transform translate-x-1/2 translate-y-1/2 "> @*načítací animace*@
        <div class=" border-t-transparent border-solid animate-spin  rounded-full border-teal-600 border-8 h-16 w-16"></div>
    </div>
    return;
}



<table class="w-full">

    <thead class="border-b-2 border-slate-500">
        <tr>
            <th>Název</th>
            <th>Datum nákupu</th>
            <th>Datum poslední revize</th>
            <th>Potřebuje revizi?</th>
            <th>Cena</th>
        </tr>
    </thead>
    
    @if(isInNewMode && newEntity!=null)
    {
 <VybaveniRow 
 EditDoneCallback="(success) => { if(success)seznamVybaveni.Insert(0,newEntity); isInNewMode = false; }" Item=newEntity>
    <button  class="twbtn bg-teal-500">Přidej</button>
    <button type="button" @onclick="() => isInNewMode = false" class="twbtn bg-yellow-500">Zrušit</button>
</VybaveniRow>

    }
    

    @foreach (var item in seznamVybaveni)
    {
        <VybaveniRow Item=item DeleteItemCallback="() => seznamVybaveni.Remove(item)"/>
    }
</table>

@code {
    bool isInNewMode;
    VybaveniModel? newEntity; 
    List<VybaveniModel>? seznamVybaveni;

    protected override async Task OnInitializedAsync()
    {
        seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniModel>?>("vybaveni");
    }

}
