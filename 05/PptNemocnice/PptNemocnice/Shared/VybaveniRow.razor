@if (Item == null) return;
@if (!Item.IsInEditMode)
{
    <tr class="@(Item.NeedsRevision?"bg-red-300":"")">
        <td>@Item.Name </td>
        <td>@Item.BoughtDateTime.ToString("yyyy-MM-dd") </td>
        <td>@Item.LastRevision.ToString("yyyy-MM-dd") </td>
        <td>@(Item.NeedsRevision?"Ano":"Ne") </td>

        <td class="flex gap-1">
            <button @onclick="() => DeleteItemCallback.InvokeAsync()" class="bg-red-400 twbtn">X</button>
            <button @onclick="() => Item.LastRevision = DateTime.Now" class="bg-blue-400 twbtn">Provést revizi</button>
            <button @onclick="() => Item.IsInEditMode = true" class="twbtn bg-amber-300">✏️</button>
        </td>
    </tr>
}
else
{
    <tr class="px-2 py-1 border-2 border-slate-600">
        <td colspan="5">
            <EditForm Model=Item OnValidSubmit="() => {EditDoneCallback.InvokeAsync();}">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <table>
                    <tbody>
                        <tr>
                            <td><InputText class="border-2 border-slate-300" @bind-Value=Item.Name /> </td>
                            <td><input class="border-2 border-slate-300" type="date" @bind-value=Item.BoughtDateTime /> </td>
                            <td><input class="border-2 border-slate-300" type="date" @bind-value=Item.LastRevision /> </td>
                            <td>@(Item.NeedsRevision?"Ano":"Ne") </td>

                            <td class="flex gap-1">

                                @if (ChildContent == null)
                                {
                                    <button type="submit" class="twbtn bg-green-500">Ok</button>
                                }
                                else
                                {
                                    @ChildContent
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
        </td>
    </tr>

}

@code {

    [Parameter] public EventCallback DeleteItemCallback { get; set; }
    [Parameter] public EventCallback EditDoneCallback { get; set; }
    [Parameter] public VybaveniModel? Item { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }


}
